import pickle
import streamlit as st
import requests
import pandas as pd

# Function to fetch movie posters from The Movie Database (TMDb)
def fetch_poster(movie_id):
    try:
        url = f"https://api.themoviedb.org/3/movie/{movie_id}?api_key=a9b10d6d77c7215f574e42415c027ed9&language=en-US"
        response = requests.get(url, timeout=5)  # Add timeout to prevent hanging
        if response.status_code != 200:
            st.error(f"Error fetching poster: Status Code {response.status_code}")
            return None

        data = response.json()
        poster_path = data.get('poster_path', '')
        if poster_path:
            full_path = "https://image.tmdb.org/t/p/w500" + poster_path
            return full_path
        else:
            st.error(f"No poster path found for movie ID: {movie_id}")
            return None
    except requests.exceptions.Timeout:
        st.error("Request to fetch poster timed out.")
        return None
    except requests.exceptions.RequestException as e:
        st.error(f"Error fetching poster: {e}")
        return None

# Function to recommend movies
def recommend(movie):
    try:
        movie_index = movies[movies['title'] == movie].index[0]
        distances = similarity[movie_index]

        # Sort by similarity score and exclude the selected movie itself
        movies_list = sorted(list(enumerate(distances)), reverse=True, key=lambda x: x[1])[1:6]

        recommended_movie_names = []
        recommended_movie_posters = []
        for i in movies_list:
            movie_id = movies.iloc[i[0]].movie_id
            recommended_movie_names.append(movies.iloc[i[0]].title)
            poster = fetch_poster(movie_id)
            recommended_movie_posters.append(poster)

        return recommended_movie_names, recommended_movie_posters
    except IndexError:
        return ["Movie not found. Please try another movie."], []

# Load movie data and similarity matrix
try:
    movies_dict = pickle.load(open('movie_dict.pkl', 'rb'))  # Load movie data
    movies = pd.DataFrame(movies_dict)
    similarity = pickle.load(open('similarity.pkl', 'rb'))  # Load similarity matrix
except FileNotFoundError as e:
    st.error(f"Error loading data: {e}")
    st.stop()

# Streamlit App title
st.title('Movie Recommender System')

# Movie selection dropdown
selected_movie_name = st.selectbox(
    "Select a movie to get recommendations:",
    movies['title'].values)

# Recommend button
if st.button('Show Recommendation'):
    recommended_movie_names, recommended_movie_posters = recommend(selected_movie_name)

    if recommended_movie_names:
        st.subheader(f"Movies recommended for '{selected_movie_name}':")

        # Create columns to display movies and their posters
        cols = st.columns(5)  # 5 columns to display 5 recommendations
        for col, name, poster in zip(cols, recommended_movie_names, recommended_movie_posters):
            with col:
                st.text(name)
                if poster:
                    st.image(poster)
                else:
                    st.text("Poster not available")
    else:
        st.write("No recommendations available.")


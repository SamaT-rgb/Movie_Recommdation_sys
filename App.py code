import pickle
import streamlit as st
import pandas as pd
import asyncio
import aiohttp


# Asynchronous function to fetch movie posters
async def fetch_poster(session, movie_id):
    
    try:
        async with session.get(url, timeout=5) as response:
            if response.status != 200:
                return None

            data = await response.json()
            poster_path = data.get('poster_path', '')
            if poster_path:
                full_path = "https://image.tmdb.org/t/p/w300" + poster_path  # Reduced size for faster load
                return full_path
            return None
    except asyncio.TimeoutError:
        return None


# Async function to handle multiple poster requests concurrently
async def fetch_posters_concurrently(movie_ids):
    async with aiohttp.ClientSession() as session:
        tasks = [fetch_poster(session, movie_id) for movie_id in movie_ids]
        posters = await asyncio.gather(*tasks)
        return posters


# Function to recommend movies and fetch posters asynchronously
def recommend(movie):
    try:
        movie_index = movies[movies['title'] == movie].index[0]
        distances = similarity[movie_index]

        # Sort by similarity score and exclude the selected movie itself
        movies_list = sorted(list(enumerate(distances)), reverse=True, key=lambda x: x[1])[1:6]

        recommended_movie_names = [movies.iloc[i[0]].title for i in movies_list]
        recommended_movie_ids = [movies.iloc[i[0]].movie_id for i in movies_list]

        # Fetch posters concurrently
        posters = asyncio.run(fetch_posters_concurrently(recommended_movie_ids))

        return recommended_movie_names, posters
    except IndexError:
        return ["Movie not found. Please try another movie."], []


# Load movie data and similarity matrix
try:
    movies_dict = pickle.load(open('movie_dict.pkl', 'rb'))  # Load movie data
    movies = pd.DataFrame(movies_dict)
    similarity = pickle.load(open('similarity.pkl', 'rb'))  # Load similarity matrix
except FileNotFoundError as e:
    st.error(f"Error loading data: {e}")
    st.stop()

# Streamlit App title
st.title('Movie Recommender System')

# Movie selection dropdown
selected_movie_name = st.selectbox(
    "Select a movie to get recommendations:",
    movies['title'].values)

# Recommend button
if st.button('Show Recommendation'):
    recommended_movie_names, recommended_movie_posters = recommend(selected_movie_name)

    if recommended_movie_names:
        st.subheader(f"Movies recommended for '{selected_movie_name}':")

        # Create columns to display movies and their posters
        # Create columns to display movies and their posters
        cols = st.columns(5)  # 5 columns to display 5 recommendations
        for col, name, poster in zip(cols, recommended_movie_names, recommended_movie_posters):
            with col:
                # Use st.markdown with custom CSS for wrapping long names
                st.markdown(f"<div style='max-width: 120px; overflow-wrap: break-word;'>{name}</div>",
                            unsafe_allow_html=True)
                if poster:
                    st.image(poster)
                else:
                    st.text("Poster not available")

    else:
        st.write("No recommendations available.")
